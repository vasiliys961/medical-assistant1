import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from PIL import Image
import json
import sqlite3
from datetime import datetime
import PyPDF2
import cv2
import base64
import io

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ò–ò
try:
    from claude_assistant import OpenRouterAssistant
    AI_AVAILABLE = True
except ImportError:
    AI_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ò–ò",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect('medical_data.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS patients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            birth_date DATE,
            gender TEXT,
            phone TEXT,
            email TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS medical_files (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            file_name TEXT NOT NULL,
            file_type TEXT NOT NULL,
            upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            analysis_result TEXT,
            FOREIGN KEY (patient_id) REFERENCES patients (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≠–ö–ì
class ECGProcessor:
    @staticmethod
    def process_csv_ecg(file):
        try:
            df = pd.read_csv(file)
            if 'time' in df.columns and 'voltage' in df.columns:
                return df
            elif len(df.columns) >= 2:
                df.columns = ['time', 'voltage'] + list(df.columns[2:])
                return df
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞ –¥–ª—è –≠–ö–ì")
                return None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            return None
    
    @staticmethod
    def process_pdf_ecg(file):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞ —Å –≠–ö–ì –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text()
            
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            import re
            numbers = re.findall(r'-?\d+\.?\d*', text)
            
            if len(numbers) >= 4:
                # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
                time_data = np.linspace(0, 10, len(numbers)//2)
                voltage_data = [float(x) for x in numbers[::2]][:len(time_data)]
                
                df = pd.DataFrame({
                    'time': time_data,
                    'voltage': voltage_data
                })
                return df
            else:
                st.warning("–í PDF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≠–ö–ì")
                return None
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞: {e}")
            return None
    
    @staticmethod
    def process_image_ecg(file):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≠–ö–ì (JPG, PNG)"""
        try:
            image = Image.open(file)
            image_array = np.array(image)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ grayscale
            if len(image_array.shape) == 3:
                gray = cv2.cvtColor(image_array, cv2.COLOR_RGB2GRAY)
            else:
                gray = image_array
            
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (–∏–º–∏—Ç–∞—Ü–∏—è –≠–ö–ì)
            height, width = gray.shape
            middle_row = height // 2
            
            # –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            voltage_profile = gray[middle_row, :]
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
            voltage_normalized = (voltage_profile - voltage_profile.mean()) / voltage_profile.std()
            time_data = np.linspace(0, 10, len(voltage_normalized))
            
            df = pd.DataFrame({
                'time': time_data,
                'voltage': voltage_normalized
            })
            
            return df, image_array
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None, None
    
    @staticmethod
    def analyze_ecg(df):
        if df is None or df.empty:
            return None
        
        analysis = {}
        analysis['duration'] = df['time'].max() - df['time'].min()
        analysis['sample_rate'] = len(df) / analysis['duration'] if analysis['duration'] > 0 else 0
        analysis['mean_voltage'] = df['voltage'].mean()
        analysis['std_voltage'] = df['voltage'].std()
        analysis['min_voltage'] = df['voltage'].min()
        analysis['max_voltage'] = df['voltage'].max()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ß–°–°
        voltage_threshold = analysis['mean_voltage'] + 2 * analysis['std_voltage']
        peaks = df[df['voltage'] > voltage_threshold]
        
        if len(peaks) > 1:
            rr_intervals = np.diff(peaks['time'].values)
            analysis['heart_rate'] = 60 / np.mean(rr_intervals) if len(rr_intervals) > 0 else 0
            analysis['num_beats'] = len(peaks)
        else:
            analysis['heart_rate'] = 0
            analysis['num_beats'] = 0
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Ç–º–∞
        if analysis['heart_rate'] < 60:
            analysis['rhythm_assessment'] = "–ë—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è"
        elif analysis['heart_rate'] > 100:
            analysis['rhythm_assessment'] = "–¢–∞—Ö–∏–∫–∞—Ä–¥–∏—è"
        else:
            analysis['rhythm_assessment'] = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º"
        
        return analysis

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤
class XRayProcessor:
    @staticmethod
    def process_image(file):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            image = Image.open(file)
            image_array = np.array(image)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ grayscale –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if len(image_array.shape) == 3:
                image_array = cv2.cvtColor(image_array, cv2.COLOR_RGB2GRAY)
            
            metadata = {
                'format': image.format if hasattr(image, 'format') else 'Unknown',
                'mode': image.mode if hasattr(image, 'mode') else 'Unknown',
                'size': image.size if hasattr(image, 'size') else image_array.shape,
                'image_shape': image_array.shape
            }
            
            return image_array, metadata
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None, None
    
    @staticmethod
    def analyze_xray(image_array, metadata):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞"""
        if image_array is None:
            return None
        
        analysis = {}
        analysis['image_statistics'] = {
            'mean_intensity': np.mean(image_array),
            'std_intensity': np.std(image_array),
            'min_intensity': np.min(image_array),
            'max_intensity': np.max(image_array),
            'shape': image_array.shape
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        analysis['contrast'] = np.std(image_array)
        
        # –ê–Ω–∞–ª–∏–∑ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        hist, bins = np.histogram(image_array.flatten(), bins=256, range=[0, 256])
        analysis['histogram'] = {
            'hist': hist.tolist(),
            'bins': bins.tolist()
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if analysis['contrast'] < 30:
            analysis['quality_assessment'] = "–ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç"
        elif analysis['contrast'] > 80:
            analysis['quality_assessment'] = "–í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç"
        else:
            analysis['quality_assessment'] = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç"
        
        analysis['metadata'] = metadata
        
        return analysis

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def show_home_page():
    st.header("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ò–ò!")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("ü§ñ –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç OpenRouter")
        st.write("**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**")
        st.write("- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        st.write("- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤")
        st.write("- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º")
        st.write("- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        
        if AI_AVAILABLE:
            st.success("‚úÖ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            st.warning("‚ö†Ô∏è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    with col2:
        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        st.write("**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**")
        st.write("üìà **–≠–ö–ì:** CSV, PDF, JPG, PNG")
        st.write("ü©ª **–†–µ–Ω—Ç–≥–µ–Ω:** JPG, PNG, DICOM")
        st.write("üî¨ **–ê–Ω–∞–ª–∏–∑—ã:** PDF, Excel, CSV")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        col2_1, col2_2 = st.columns(2)
        with col2_1:
            if st.button("üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì", use_container_width=True):
                st.session_state.current_page = "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì"
                st.rerun()
        with col2_2:
            if st.button("ü©ª –†–µ–Ω—Ç–≥–µ–Ω", use_container_width=True):
                st.session_state.current_page = "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞"
                st.rerun()

# –ê–Ω–∞–ª–∏–∑ –≠–ö–ì
def show_ecg_analysis():
    st.header("üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì –¥–∞–Ω–Ω—ã—Ö")
    
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≠–ö–ì",
        type=['csv', 'pdf', 'jpg', 'jpeg', 'png'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV, PDF, JPG, PNG"
    )
    
    if uploaded_file is not None:
        file_extension = uploaded_file.name.split('.')[-1].lower()
        
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
            ecg_processor = ECGProcessor()
            df = None
            original_image = None
            
            if file_extension == 'csv':
                df = ecg_processor.process_csv_ecg(uploaded_file)
            elif file_extension == 'pdf':
                df = ecg_processor.process_pdf_ecg(uploaded_file)
            elif file_extension in ['jpg', 'jpeg', 'png']:
                result = ecg_processor.process_image_ecg(uploaded_file)
                if result and len(result) == 2:
                    df, original_image = result
                else:
                    df = None
            
            if df is not None:
                st.success(f"–§–∞–π–ª {file_extension.upper()} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                
                # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                analysis = ecg_processor.analyze_ecg(df)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –ò–ò
                st.session_state.current_analysis = analysis
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                if original_image is not None:
                    st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    st.image(original_image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≠–ö–ì –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –≠–ö–ì")
                    fig = go.Figure()
                    fig.add_trace(go.Scatter(
                        x=df['time'],
                        y=df['voltage'],
                        mode='lines',
                        name='–≠–ö–ì —Å–∏–≥–Ω–∞–ª',
                        line=dict(color='red', width=1)
                    ))
                    fig.update_layout(
                        title="–≠–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º–∞",
                        xaxis_title="–í—Ä–µ–º—è (—Å)",
                        yaxis_title="–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–º–í)",
                        height=400
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                    if analysis:
                        st.metric("–ß–°–°", f"{analysis['heart_rate']:.0f} —É–¥/–º–∏–Ω")
                        st.metric("–†–∏—Ç–º", analysis['rhythm_assessment'])
                        st.metric("–ö–æ–º–ø–ª–µ–∫—Å—ã", analysis['num_beats'])
                        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{analysis['duration']:.1f} —Å")
                        st.metric("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞", file_extension.upper())
                
                # –ò–ò-–∞–Ω–∞–ª–∏–∑
                if AI_AVAILABLE and analysis:
                    st.markdown("---")
                    st.subheader("ü§ñ –ò–ò-–ê–Ω–∞–ª–∏–∑ –≠–ö–ì")
                    
                    col3, col4 = st.columns(2)
                    
                    with col3:
                        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò"):
                            try:
                                assistant = OpenRouterAssistant()
                                with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≠–ö–ì..."):
                                    ai_response = assistant.analyze_ecg_data(analysis)
                                st.write("**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ò–ò:**")
                                st.write(ai_response)
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
                    
                    with col4:
                        custom_question = st.text_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –≠–ö–ì:")
                        if st.button("–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò") and custom_question:
                            try:
                                assistant = OpenRouterAssistant()
                                with st.spinner("–ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç..."):
                                    ai_response = assistant.analyze_ecg_data(analysis, custom_question)
                                st.write("**–û—Ç–≤–µ—Ç –ò–ò:**")
                                st.write(ai_response)
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞: {e}")

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞
def show_xray_analysis():
    st.header("ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤")
    
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫",
        type=['jpg', 'jpeg', 'png', 'dcm'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, DICOM"
    )
    
    if uploaded_file is not None:
        file_extension = uploaded_file.name.split('.')[-1].lower()
        
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            xray_processor = XRayProcessor()
            
            if file_extension in ['jpg', 'jpeg', 'png']:
                image_array, metadata = xray_processor.process_image(uploaded_file)
            elif file_extension == 'dcm':
                st.warning("DICOM –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∞–∑–æ–≤–∞—è - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–∫ JPG/PNG –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                try:
                    import pydicom
                    dicom_data = pydicom.dcmread(uploaded_file)
                    image_array = dicom_data.pixel_array
                    metadata = {'format': 'DICOM', 'shape': image_array.shape}
                except:
                    st.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DICOM —Ñ–∞–π–ª–∞")
                    return
            else:
                st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                return
            
            if image_array is not None:
                st.success("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
                
                # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                analysis = xray_processor.analyze_xray(image_array, metadata)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ò–ò
                st.session_state.current_xray_analysis = analysis
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.subheader("–†–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫")
                    st.image(image_array, caption="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True, clamp=True)
                
                with col2:
                    st.subheader("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
                    if metadata:
                        for key, value in metadata.items():
                            st.write(f"**{key}:** {value}")
                    
                    # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if analysis:
                        st.subheader("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                        stats = analysis['image_statistics']
                        st.metric("–†–∞–∑–º–µ—Ä", f"{stats['shape']}")
                        st.metric("–°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å", f"{stats['mean_intensity']:.1f}")
                        st.metric("–ö–æ–Ω—Ç—Ä–∞—Å—Ç", f"{analysis['contrast']:.1f}")
                        st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", analysis['quality_assessment'])
                
                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
                if analysis and 'histogram' in analysis:
                    st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏")
                    fig = px.histogram(
                        x=analysis['histogram']['bins'][:-1],
                        y=analysis['histogram']['hist'],
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π"
                    )
                    fig.update_layout(
                        xaxis_title="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å",
                        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                # –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞
                if AI_AVAILABLE and analysis:
                    st.markdown("---")
                    st.subheader("ü§ñ –ò–ò-–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞")
                    
                    col3, col4 = st.columns(2)
                    
                    with col3:
                        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Å –ø–æ–º–æ—â—å—é –ò–ò"):
                            try:
                                assistant = OpenRouterAssistant()
                                with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–Ω–∏–º–æ–∫..."):
                                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–Ω—Ç–≥–µ–Ω–∞
                                    context = f"""
–î–∞–Ω–Ω—ã–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞:
- –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {analysis['quality_assessment']}
- –ö–æ–Ω—Ç—Ä–∞—Å—Ç: {analysis['contrast']:.1f}
- –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {analysis['image_statistics']['shape']}
- –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {analysis['image_statistics']['mean_intensity']:.1f}
"""
                                    ai_response = assistant.get_response(
                                        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞ –∏ –¥–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                                        context
                                    )
                                st.write("**–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∏–º–∫–∞:**")
                                st.write(ai_response)
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
                    
                    with col4:
                        custom_question = st.text_input("–í–æ–ø—Ä–æ—Å –ø–æ —Å–Ω–∏–º–∫—É:")
                        if st.button("–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò –æ —Å–Ω–∏–º–∫–µ") and custom_question:
                            try:
                                assistant = OpenRouterAssistant()
                                with st.spinner("–ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç..."):
                                    context = f"–†–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫: –∫–∞—á–µ—Å—Ç–≤–æ {analysis['quality_assessment']}, –∫–æ–Ω—Ç—Ä–∞—Å—Ç {analysis['contrast']:.1f}"
                                    ai_response = assistant.get_response(custom_question, context)
                                st.write("**–û—Ç–≤–µ—Ç –ò–ò:**")
                                st.write(ai_response)
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞: {e}")

# –ò–ò —á–∞—Ç
def show_ai_chat():
    st.header("ü§ñ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
    
    if not AI_AVAILABLE:
        st.error("–ò–ò-–º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª claude_assistant.py")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª claude_assistant.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
        return
    
    try:
        assistant = OpenRouterAssistant()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"):
                with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."):
                    success, message = assistant.test_connection()
                if success:
                    st.success(message)
                else:
                    st.error(message)
        
        with col2:
            st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenRouter API —Å Claude 3 Sonnet")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []
        
        # –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        quick_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –≠–ö–ì?",
            "–û–±—ä—è—Å–Ω–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏",
            "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏—è?",
            "–ù–æ—Ä–º—ã –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è"
        ]
        
        cols = st.columns(len(quick_questions))
        for i, question in enumerate(quick_questions):
            with cols[i]:
                if st.button(question, key=f"quick_{i}"):
                    process_ai_message(question, assistant)
        
        st.markdown("---")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        st.subheader("üí¨ –ß–∞—Ç —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
        
        for message in st.session_state.chat_history[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            st.chat_message("user").write(message['user'])
            st.chat_message("assistant").write(message['assistant'])
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_input = st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É...")
        
        if user_input:
            process_ai_message(user_input, assistant)
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ò: {e}")
        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")

def process_ai_message(user_message, assistant):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ò–ò"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.chat_message("user").write(user_message)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    with st.chat_message("assistant"):
        with st.spinner("–ò–ò –¥—É–º–∞–µ—Ç..."):
            response = assistant.general_medical_consultation(user_message)
        st.write(response)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.chat_history.append({
        'user': user_message,
        'assistant': response,
        'timestamp': datetime.now().isoformat()
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if len(st.session_state.chat_history) > 50:
        st.session_state.chat_history = st.session_state.chat_history[-50:]
    
    st.rerun()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
def show_patient_database():
    st.header("üë§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    
    tab1, tab2 = st.tabs(["–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"])
    
    with tab1:
        st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        
        with st.form("add_patient_form"):
            name = st.text_input("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞*")
            birth_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
            gender = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ —É–∫–∞–∑–∞–Ω"])
            phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
            email = st.text_input("Email")
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
            
            if submitted and name:
                conn = sqlite3.connect('medical_data.db')
                cursor = conn.cursor()
                
                try:
                    cursor.execute('''
                        INSERT INTO patients (name, birth_date, gender, phone, email)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (name, birth_date, gender, phone, email))
                    conn.commit()
                    st.success(f"–ü–∞—Ü–∏–µ–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                except sqlite3.Error as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
                finally:
                    conn.close()
    
    with tab2:
        st.subheader("–ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        
        search_term = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –§–ò–û")
        
        conn = sqlite3.connect('medical_data.db')
        
        try:
            if search_term:
                query = "SELECT * FROM patients WHERE name LIKE ? ORDER BY created_at DESC"
                df_patients = pd.read_sql_query(query, conn, params=[f"%{search_term}%"])
            else:
                query = "SELECT * FROM patients ORDER BY created_at DESC LIMIT 10"
                df_patients = pd.read_sql_query(query, conn)
            
            if not df_patients.empty:
                st.dataframe(df_patients, use_container_width=True)
            else:
                st.info("–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        finally:
            conn.close()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.title("üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ò–ò")
    st.markdown("### –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.title("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "üè† –ì–ª–∞–≤–Ω–∞—è"
    
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        [
            "üè† –ì–ª–∞–≤–Ω–∞—è", 
            "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì", 
            "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞",
            "ü§ñ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
            "üë§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"
        ],
        index=[
            "üè† –ì–ª–∞–≤–Ω–∞—è", 
            "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì", 
            "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞",
            "ü§ñ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
            "üë§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"
        ].index(st.session_state.current_page) if st.session_state.current_page in [
            "üè† –ì–ª–∞–≤–Ω–∞—è", 
            "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì", 
            "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞",
            "ü§ñ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
            "üë§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"
        ] else 0
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    st.session_state.current_page = page
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_home_page()
    elif page == "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì":
        show_ecg_analysis()
    elif page == "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞":
        show_xray_analysis()
    elif page == "ü§ñ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç":
        show_ai_chat()
    elif page == "üë§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤":
        show_patient_database()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v2.0**
    
    üîπ –ê–Ω–∞–ª–∏–∑ –≠–ö–ì (CSV, PDF, JPG, PNG)
    üîπ –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞ (JPG, PNG, DICOM)
    üîπ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏  
    üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    üîπ OpenRouter API
    
    ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
    """)

if __name__ == "__main__":
    main()