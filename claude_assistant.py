import streamlit as st
import requests
import numpy as np
import cv2
from PIL import Image
import base64
import io
import os
import pydicom
try:
    from pdf2image import convert_from_bytes
except ImportError:
    convert_from_bytes = None

# --- –ö–õ–ê–°–° –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢–ê ---
class OpenRouterAssistant:
    def __init__(self):
        self.api_key = "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"
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.model = "anthropic/claude-3.5-sonnet"

        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/vasiliys961/medical-assistant1",
            "X-Title": "Medical AI Assistant"
        }

    def test_connection(self):
        try:
            payload = {
                "model": self.model,
                "messages": [{"role": "user", "content": "Hello"}],
                "max_tokens": 5
            }
            response = requests.post(self.base_url, headers=self.headers, json=payload, timeout=10)
            return response.status_code == 200
        except:
            return False

    def send_vision_request(self, prompt: str, image_array=None, metadata: str = ""):
        messages = [{"role": "user", "content": []}]
        full_text = f"{prompt}\n\n{metadata}" if metadata else prompt
        messages[0]["content"].append({"type": "text", "text": full_text})

        if image_array is not None:
            img = Image.fromarray(image_array) if isinstance(image_array, np.ndarray) else image_array
            buffered = io.BytesIO()
            img.save(buffered, format="PNG")
            img_str = base64.b64encode(buffered.getvalue()).decode()
            messages[0]["content"].append({
                "type": "image_url",
                "image_url": {"url": f"data:image/png;base64,{img_str}"}
            })

        payload = {
            "model": self.model,
            "messages": messages,
            "max_tokens": 1200,
            "temperature": 0.3
        }

        try:
            response = requests.post(self.base_url, headers=self.headers, json=payload, timeout=60)
            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
            else:
                return f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}, {response.text}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"


# --- –£–¢–ò–õ–ò–¢–´ ---
def load_image_from_file(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ JPG/PNG/DICOM/PDF + –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    if uploaded_file.name.lower().endswith(".dcm"):
        dicom = pydicom.dcmread(uploaded_file)

        metadata = {
            "Modality": getattr(dicom, "Modality", "N/A"),
            "PatientName": getattr(dicom, "PatientName", "N/A"),
            "PatientSex": getattr(dicom, "PatientSex", "N/A"),
            "PatientAge": getattr(dicom, "PatientAge", "N/A"),
            "StudyDate": getattr(dicom, "StudyDate", "N/A"),
            "InstitutionName": getattr(dicom, "InstitutionName", "N/A"),
            "BodyPartExamined": getattr(dicom, "BodyPartExamined", "N/A"),
            "ImageType": getattr(dicom, "ImageType", "N/A"),
            "SeriesDescription": getattr(dicom, "SeriesDescription", "N/A"),
            "ProtocolName": getattr(dicom, "ProtocolName", "N/A"),
            "SliceThickness": getattr(dicom, "SliceThickness", "N/A"),
            "EchoTime": getattr(dicom, "EchoTime", "N/A"),
            "RepetitionTime": getattr(dicom, "RepetitionTime", "N/A"),
            "MagneticFieldStrength": getattr(dicom, "MagneticFieldStrength", "N/A"),
            "Comments": getattr(dicom, "ImageComments", "N/A")
        }
        metadata_str = "\n".join([f"{k}: {v}" for k, v in metadata.items() if v != "N/A"])

        img = dicom.pixel_array
        if img.dtype != np.uint8:
            img = np.uint8((img - img.min()) / (img.max() - img.min()) * 255)
        return img, "DICOM", metadata_str

    elif uploaded_file.name.lower().endswith(".pdf"):
        if convert_from_bytes is None:
            st.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `pdf2image`: pip install pdf2image")
            return None, None, ""
        pages = convert_from_bytes(uploaded_file.read(), dpi=200)
        img = pages[0].convert("L")
        metadata_str = f"PDF, {len(pages)} pages"
        return np.array(img), "PDF", metadata_str

    else:
        img = Image.open(uploaded_file)
        if img.mode != "L":
            img = img.convert("L")
        metadata_str = f"File: {uploaded_file.name}, Format: {img.format}, Size: {img.size}"
        return np.array(img), "IMAGE", metadata_str


def extract_ecg_signal(image_array):
    img = cv2.equalizeHist(image_array)
    h, w = img.shape
    start = h // 2 - 5
    end = h // 2 + 5
    signal = np.mean(img[start:end, :], axis=0)
    if np.mean(signal[:100]) > np.mean(signal[-100:]):
        signal = 255 - signal
    return signal


def analyze_ecg_basic(image_array):
    signal = extract_ecg_signal(image_array)
    heart_rate = int(60 / (len(signal) / 500)) * 10
    rhythm = "–°–∏–Ω—É—Å–æ–≤—ã–π" if 60 < heart_rate < 100 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∏—Ç–º–∞"
    duration = len(signal) / 500
    num_beats = int(duration * heart_rate / 60)
    return {
        "heart_rate": heart_rate,
        "rhythm_assessment": rhythm,
        "num_beats": num_beats,
        "duration": duration,
        "signal_quality": "–•–æ—Ä–æ—à–µ–µ",
        "analysis_method": "Advanced Image Processing"
    }


def analyze_xray_basic(image_array):
    contrast = np.std(image_array)
    sharpness = cv2.Laplacian(image_array, cv2.CV_64F).var()
    quality = "–•–æ—Ä–æ—à–µ–µ" if sharpness > 100 and contrast > 40 else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
    return {
        "quality_assessment": quality,
        "contrast": float(contrast),
        "detailed_quality": {
            "sharpness": float(sharpness),
            "snr": float(np.mean(image_array) / np.std(image_array))
        },
        "lung_area": int(np.sum(image_array < 200)),
        "analysis_method": "Advanced Computer Vision"
    }


def analyze_mri_quality(image_array):
    sharpness = cv2.Laplacian(image_array, cv2.CV_64F).var()
    noise = np.std(image_array)
    snr = np.mean(image_array) / (noise + 1e-6)
    artifacts = "–í–æ–∑–º–æ–∂–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è" if sharpness < 80 else "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"
    quality = "–•–æ—Ä–æ—à–µ–µ" if sharpness > 100 and noise < 30 else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ/–¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å—ä—ë–º–∫–∏"
    return {
        "quality_assessment": quality,
        "sharpness": float(sharpness),
        "noise_level": float(noise),
        "snr": float(snr),
        "artifacts": artifacts,
        "analysis_method": "MRI-Specific CV Metrics"
    }


# --- –°–¢–†–ê–ù–ò–¶–´ ---
def show_home_page():
    st.markdown("# üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v3.3")
    st.write("Vision + DICOM + –∞–Ω–∞–ª–∏–∑ ‚Üí –ò–ò —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
    st.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ú–†–¢ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader("üìà –≠–ö–ì")
        st.write("- –ß–°–°, —Ä–∏—Ç–º, –∞—Ä–∏—Ç–º–∏–∏")
    with col2:
        st.subheader("ü©ª –†–µ–Ω—Ç–≥–µ–Ω")
        st.write("- –ö–∞—á–µ—Å—Ç–≤–æ, –ø–∞—Ç–æ–ª–æ–≥–∏—è –ª—ë–≥–∫–∏—Ö")
    with col3:
        st.subheader("üß† –ú–†–¢")
        st.write("- –ö–∞—á–µ—Å—Ç–≤–æ, –∞–Ω–∞—Ç–æ–º–∏—è, –ø–∞—Ç–æ–ª–æ–≥–∏—è")


def show_ecg_analysis():
    st.header("üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≠–ö–ì (JPG, PNG, PDF, DICOM)", type=["jpg", "png", "pdf", "dcm"])

    if uploaded_file is None:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
        image_array, file_type, metadata_str = load_image_from_file(uploaded_file)
        if image_array is None:
            return
        analysis = analyze_ecg_basic(image_array)

    st.image(image_array, caption="–≠–ö–ì", use_container_width=True, clamp=True)

    with st.expander("üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞"):
        st.text(metadata_str)

    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ß–°–°", f"{analysis['heart_rate']} —É–¥/–º–∏–Ω")
        st.metric("–†–∏—Ç–º", analysis['rhythm_assessment'])
    with col2:
        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{analysis['duration']:.1f} —Å")
        st.metric("–ö–æ–º–ø–ª–µ–∫—Å—ã", analysis['num_beats'])

    if 'assistant' not in st.session_state:
        st.session_state.assistant = OpenRouterAssistant()
    assistant = st.session_state.assistant

    if st.button("üîç –ò–ò-–∞–Ω–∞–ª–∏–∑ –≠–ö–ì (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)"):
        with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≠–ö–ì..."):
            clinical_metadata = (
                f"–ß–°–°: {analysis['heart_rate']}\n–†–∏—Ç–º: {analysis['rhythm_assessment']}\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis['duration']:.1f} —Å\n–ú–µ—Ç–æ–¥: {analysis['analysis_method']}"
            )
            full_metadata = f"=== –î–ê–ù–ù–´–ï ===\n{metadata_str}\n\n=== –ê–ù–ê–õ–ò–ó ===\n{clinical_metadata}"
            prompt = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≠–ö–ì –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –û—Ü–µ–Ω–∏—Ç–µ —Ä–∏—Ç–º, –ß–°–°, –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—à–µ–º–∏–∏, –±–ª–æ–∫–∞–¥, –∞—Ä–∏—Ç–º–∏–π.
            –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö. –î–∞–π—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            """
            result = assistant.send_vision_request(prompt, image_array, full_metadata)
            st.markdown("### üß† –û—Ç–≤–µ—Ç –ò–ò:")
            st.write(result)

    custom_q = st.text_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –≠–ö–ì:")
    if st.button("üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò") and custom_q:
        full_metadata = f"–ß–°–°: {analysis['heart_rate']}, —Ä–∏—Ç–º: {analysis['rhythm_assessment']}\n{metadata_str}"
        result = assistant.send_vision_request(custom_q, image_array, full_metadata)
        st.markdown("### üí¨ –û—Ç–≤–µ—Ç:")
        st.write(result)


def show_xray_analysis():
    st.header("ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω (JPG, PNG, DICOM)", type=["jpg", "png", "dcm"])

    if uploaded_file is None:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
        image_array, file_type, metadata_str = load_image_from_file(uploaded_file)
        if image_array is None:
            return
        analysis = analyze_xray_basic(image_array)

    st.image(image_array, caption="–†–µ–Ω—Ç–≥–µ–Ω", use_container_width=True, clamp=True)

    with st.expander("üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"):
        st.text(metadata_str)

    st.subheader("üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", analysis['quality_assessment'])
        st.metric("–ö–æ–Ω—Ç—Ä–∞—Å—Ç", f"{analysis['contrast']:.1f}")
    with col2:
        st.metric("–†–µ–∑–∫–æ—Å—Ç—å", f"{analysis['detailed_quality']['sharpness']:.1f}")
        st.metric("–ü–ª–æ—â–∞–¥—å –ª—ë–≥–∫–∏—Ö", f"{analysis['lung_area']:,}")

    if 'assistant' not in st.session_state:
        st.session_state.assistant = OpenRouterAssistant()
    assistant = st.session_state.assistant

    if st.button("ü©∫ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞"):
        with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–Ω–∏–º–æ–∫..."):
            clinical_metadata = (
                f"–ö–∞—á–µ—Å—Ç–≤–æ: {analysis['quality_assessment']}\n–ö–æ–Ω—Ç—Ä–∞—Å—Ç: {analysis['contrast']:.1f}\n"
                f"–†–µ–∑–∫–æ—Å—Ç—å: {analysis['detailed_quality']['sharpness']:.1f}"
            )
            full_metadata = f"=== –î–ê–ù–ù–´–ï ===\n{metadata_str}\n\n=== –ê–ù–ê–õ–ò–ó ===\n{clinical_metadata}"
            prompt = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏. –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–∏.
            –î–∞–π—Ç–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            """
            result = assistant.send_vision_request(prompt, image_array, full_metadata)
            st.markdown("### üß† –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
            st.write(result)

    custom_q = st.text_input("–í–æ–ø—Ä–æ—Å –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω—É:")
    if st.button("üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò –æ —Å–Ω–∏–º–∫–µ") and custom_q:
        full_metadata = f"–ö–∞—á–µ—Å—Ç–≤–æ: {analysis['quality_assessment']}\n{metadata_str}"
        result = assistant.send_vision_request(custom_q, image_array, full_metadata)
        st.markdown("### üí¨ –û—Ç–≤–µ—Ç:")
        st.write(result)


def show_mri_analysis():
    st.header("üß† –ê–Ω–∞–ª–∏–∑ –ú–†–¢")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ú–†–¢ (DICOM, JPG, PNG)", type=["dcm", "jpg", "png"])

    if uploaded_file is None:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ DICOM-—Ñ–∞–π–ª –ú–†–¢ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–µ–∑–∞..."):
        image_array, file_type, metadata_str = load_image_from_file(uploaded_file)
        if image_array is None:
            return
        mri_analysis = analyze_mri_quality(image_array)

    st.image(image_array, caption="–ú–†–¢-—Å—Ä–µ–∑", use_container_width=True, clamp=True)

    with st.expander("üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ú–†–¢"):
        st.text(metadata_str)

    st.subheader("üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ú–†–¢")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", mri_analysis['quality_assessment'])
        st.metric("–†–µ–∑–∫–æ—Å—Ç—å", f"{mri_analysis['sharpness']:.1f}")
    with col2:
        st.metric("–®—É–º", f"{mri_analysis['noise_level']:.1f}")
        st.metric("SNR", f"{mri_analysis['snr']:.2f}")

    st.caption(f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {mri_analysis['artifacts']}")

    if 'assistant' not in st.session_state:
        st.session_state.assistant = OpenRouterAssistant()
    assistant = st.session_state.assistant

    if st.button("üß† –ò–ò-–∞–Ω–∞–ª–∏–∑ –ú–†–¢ (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)"):
        with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ú–†–¢..."):
            clinical_metadata = (
                f"–ö–∞—á–µ—Å—Ç–≤–æ: {mri_analysis['quality_assessment']}\n"
                f"–†–µ–∑–∫–æ—Å—Ç—å: {mri_analysis['sharpness']:.1f}\n"
                f"–®—É–º: {mri_analysis['noise_level']:.1f}\n"
                f"SNR: {mri_analysis['snr']:.2f}\n"
                f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {mri_analysis['artifacts']}\n"
                f"–ú–µ—Ç–æ–¥: {mri_analysis['analysis_method']}"
            )
            full_metadata = f"=== DICOM –î–ê–ù–ù–´–ï ===\n{metadata_str}\n\n=== –ö–ê–ß–ï–°–¢–í–û ===\n{clinical_metadata}"

            prompt = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ú–†–¢-—Å—Ä–µ–∑ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ:
            1. –ê–Ω–∞—Ç–æ–º–∏—é (–≥–æ–ª–æ–≤–∞, –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫, —Å—É—Å—Ç–∞–≤ –∏ —Ç.–¥.) –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            2. –ö–∞—á–µ—Å—Ç–≤–æ: —Ä–µ–∑–∫–æ—Å—Ç—å, —à—É–º, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            3. –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏: –æ–ø—É—Ö–æ–ª–∏, –æ—Ç—ë–∫, –≥—Ä—ã–∂–∏, –∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏—è
            4. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (T1, T2, FLAIR –∏ —Ç.–¥.)
            5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ü–∏–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –ö–¢, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ–≤—Ä–æ–ª–æ–≥–∞
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–π—Ä–æ–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ —Ç–æ—á–Ω—ã–º.
            """

            result = assistant.send_vision_request(prompt, image_array, full_metadata)
            st.markdown("### üß† –ù–µ–π—Ä–æ—Ä–∞–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:")
            st.write(result)

    custom_q = st.text_input("–í–æ–ø—Ä–æ—Å –ø–æ –ú–†–¢:")
    if st.button("üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò –æ –ú–†–¢") and custom_q:
        full_metadata = f"=== –î–ê–ù–ù–´–ï ===\n{metadata_str}\n\n=== –ö–ê–ß–ï–°–¢–í–û ===\n" + \
                        f"–ö–∞—á–µ—Å—Ç–≤–æ: {mri_analysis['quality_assessment']}, SNR: {mri_analysis['snr']:.2f}"
        result = assistant.send_vision_request(custom_q, image_array, full_metadata)
        st.markdown("### üí¨ –û—Ç–≤–µ—Ç:")
        st.write(result)


# --- –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ---
def main():
    st.set_page_config(page_title="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", layout="wide")
    st.sidebar.title("üß† –ú–µ–Ω—é")

    if "current_page" not in st.session_state:
        st.session_state.current_page = "üè† –ì–ª–∞–≤–Ω–∞—è"

    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["üè† –ì–ª–∞–≤–Ω–∞—è", "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì", "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞", "üß† –ê–Ω–∞–ª–∏–∑ –ú–†–¢"],  # <-- –ú–†–¢ –î–û–ë–ê–í–õ–ï–ù –ó–î–ï–°–¨
        index=["üè† –ì–ª–∞–≤–Ω–∞—è", "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì", "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞", "üß† –ê–Ω–∞–ª–∏–∑ –ú–†–¢"].index(st.session_state.current_page)
    )
    st.session_state.current_page = page

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_home_page()
    elif page == "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì":
        show_ecg_analysis()
    elif page == "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞":
        show_xray_analysis()
    elif page == "üß† –ê–Ω–∞–ª–∏–∑ –ú–†–¢":  # <-- –ò –ó–î–ï–°–¨
        show_mri_analysis()

    st.sidebar.markdown("---")
    st.sidebar.info("""
    **–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v3.3**  
    üîπ Vision + DICOM + –∞–Ω–∞–ª–∏–∑ ‚Üí –ò–ò —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º  
    üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –≠–ö–ì, —Ä–µ–Ω—Ç–≥–µ–Ω, –ú–†–¢, PDF  
    üîπ Claude 3.5 Sonnet + OpenRouter  
    ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    """)


if __name__ == "__main__":
    main()